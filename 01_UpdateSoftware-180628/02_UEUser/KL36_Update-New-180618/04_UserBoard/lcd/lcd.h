#ifndef __LCD_H
#define __LCD_H
#include "common.h"    //包含公共要素头文件
#include "gpio.h"      //包含gpio头文件
/******************************************************
接线方式
VCC=3.3V
GND=GND
PD5=RES
PD4=DC
PD1=CLK
PD2=MOSI
BLK,MISO可以不接
******************************************************/

#define LCD_RS    (PTD_NUM|2)    //LCD复位
#define LCD_DC    (PTD_NUM|1)    //LCD数据/命令
#define LCD_SCK   (PTC_NUM|5)    //LCD时钟
#define LCD_SDI   (PTC_NUM|7)    //LCD主出从入

//定义LCD的尺寸（240*320像素）
#define LCD_W 240    
#define LCD_H 320

//=====================================================================
//函数名称：Lcd_Init。
//函数返回：无
//参数说明：无
//功能概要：LCD初始化
//=====================================================================
void LCD_Init(void);    //LCD初始化

//=====================================================================
//函数名称：LCD_Clear
//函数返回：无
//参数说明：background:背景颜色（使用本文件后画笔颜色宏定义）
//功能概要：LCD清屏
//=====================================================================
void LCD_Clear(uint_16 background);    //LCD清屏

//=====================================================================
//函数名称：LCD_DrawPoint
//函数返回：无
//参数说明：x,y:点坐标(240*320),
//       color:颜色（使用本文件后画笔颜色宏定义）
//功能概要：在指定位置画一个点
//=====================================================================
void LCD_DrawPoint(uint_16 x,uint_16 y,uint_16 color);    //画点

//=====================================================================
//函数名称：LCD_DrawPoint_big
//函数返回：无
//参数说明：x,y:点坐标(240*320)
//       color:颜色（使用本文件后画笔颜色宏定义）
//功能概要：在指定位置画一个大点,大点的范围实际是一个以x-1,y-1为左上解，x+1,y+1为右下角的小矩形
//       包含9个点（3*3）的大点。
//=====================================================================
void LCD_DrawPoint_big(uint_16 x,uint_16 y,uint_16 color);    //画一个大点

//=====================================================================
//函数名称：Draw_Circle
//函数返回：无
//参数说明：x,y:中心点坐标(240*320),
//       r:圆的半径,
//       color:颜色（使用本文件后画笔颜色宏定义）
//功能概要：在指定位置画一个指定大小的圆
//=====================================================================
void LCD_DrawCircle(uint_16 x,uint_16 y,uint_8 r,uint_16 color);  //画圆

//=====================================================================
//函数名称：LCD_DrawLine
//函数返回：无
//参数说明：x1,y1:起点坐标(240*320),x2,y2:终点坐标(240*320),
//       color:颜色（使用本文件后画笔颜色宏定义）
//功能概要：在指定两点间画一条指定颜色的直线
//=====================================================================
void LCD_DrawLine(uint_16 x1,uint_16 y1,
	 uint_16 x2, uint_16 y2,uint_16 color);    //画线

//=====================================================================
//函数名称：LCD_DrawRectangle
//函数返回：无
//参数说明：x1,y1:左上角点坐标(240*320),x2,y2:右下角点坐标(240*320),
//       color:颜色（使用本文件后画笔颜色宏定义）
//功能概要：在指定左上角与右下角画一个指定线条颜色的矩形
//=====================================================================
void LCD_DrawRectangle(uint_16 x1, uint_16 y1, 
     uint_16 x2, uint_16 y2,uint_16 color);    //画矩形

//=====================================================================
//函数名称：LCD_DrawSurface
//函数返回：无
//参数说明：x1,y1:起点坐标(240*320),x2,y2:终点坐标(240*320),
//       color:颜色（使用本文件后画笔颜色宏定义）
//功能概要：指定颜色填充矩形区域
//=====================================================================
void LCD_DrawSurface(uint_16 x1,uint_16 y1,
     uint_16 x2,uint_16 y2,uint_16 color);    //填充矩形区域

//=====================================================================
//函数名称：LCD_ShowChar
//函数返回：无
//参数说明：x,y:显示字符坐标(240*320),ch:要显示的字符,
//       mode:叠加方式(1)还是非叠加方式(0)，
//       color:字符颜色（使用本文件后画笔颜色宏定义）
//功能概要：在指定位置显示一个指定颜色的字符,mode=1不改变背景色显示字符，mode=0 背景为黑显示字符
//       字符大小为16*8
//=====================================================================
void LCD_ShowChar(uint_16 x,uint_16 y,uint_8 ch,
	 uint_8 mode,uint_16 color);    //显示一个指定颜色字符

//=====================================================================
//函数名称：LCD_ShowNum
//函数返回：无
//参数说明：x,y:起点坐标(240*320),len:数字显示的宽度,num:数值(0~4294967295)
//       color:字符颜色（使用本文件后画笔颜色宏定义）
//功能概要：在指定位置用指定颜色显示数字，len为显示宽度，当宽度少于数字位数时，高位丢失，当宽度大于数字
//       位数时补空格，数字以非叠加方式显示，即背景色为黑色
//=====================================================================
void LCD_ShowNum(uint_16 x,uint_16 y,uint_32 num,
	 uint_8 len,uint_16 color);    //显示数字

//=====================================================================
//函数名称：LCD_Show2Num。
//函数返回：无
//参数说明：x,y:起点坐标(240*320),len:数字显示的宽度,num:数值(0~65535),color:颜色
//功能概要：在指定位置用指定颜色显示数字，len为显示宽度，当宽度少于数字位数时，高位丢失，当宽度大于数字
//       位数时补'0'，数字以非叠加方式显示，即背景色为黑色
//=====================================================================
void LCD_Show2Num(uint_16 x,uint_16 y,uint_16 num,
	 uint_8 len,uint_16 color);    //显示数字


//=====================================================================
//函数名称：LCD_ShowLetter
//函数返回：无
//参数说明：x,y:起点坐标(240*320),index：字符在字库中的索引,fontcolor:字体颜色,
//       groundbackcolor:背景颜色
//功能概要：在指定位置显示一个字母(32*32大小)
//=====================================================================
void LCD_ShowLetter(uint_16 x,uint_16 y,uint_8 index,uint_16 fontcolor,
	 uint_16 groundbackcolor);    //显示32*32英文字符

//=====================================================================
//函数名称：LCD_ShowStringA
//函数返回：无
//参数说明：x,y:起点坐标(240*320),p:字符串起始地址,color:字体颜色
//功能概要：在指定位置显示字符串，以非叠加方式显示
//=====================================================================
void LCD_ShowStringA(uint_16 x,uint_16 y,const uint_8 *p ,
		uint_16 color);    //显示字符串

//=====================================================================
//函数名称：LCD_ShowStringB
//函数返回：无
//参数说明：x,y:起点坐标(240*320),p:字符串起始地址,color:字体颜色
//功能概要：在指定位置显示字符串，以叠加方式显示
//=====================================================================
void LCD_ShowStringB(uint_16 x,uint_16 y,const uint_8 *p ,
		uint_16 color);    //显示字符串

//=====================================================================
//函数名称：LCD_ShowString
//函数返回：无
//参数说明：x,y:起点坐标(240*320),p:字符串起始地址（可以包含中文，但应包含在汉字字模中）
//       color:颜色（使用本文件后画笔颜色宏定义）
//功能概要：在指定位置显示字符串，可指定显示画笔颜色和背景颜色。
//                   中文大小为（16*16）,英文大小为（8*16）
//=====================================================================
void LCD_ShowString(uint_16  x,uint_16 y,uint_16 fontcolor,
	 uint_16 groundbackcolor,const uint_8 *p);

//=====================================================================
//函数名称：LCD_ShowHugeString
//函数返回：无
//参数说明：x,y:起点坐标(240*320),p:字符串起始地址（可以包含中文，但应包含在汉字字模中）
//       color:颜色（使用本文件后画笔颜色宏定义）
//功能概要：在指定位置显示字符串，可指定显示画笔颜色和背景颜色。
//                   中文大小为（32*32）,英文大小为（16*32）
//=====================================================================
void LCD_ShowHugeString(uint_16  x,uint_16 y,uint_16 fontcolor,
	 uint_16 groundbackcolor,const uint_8 *p);

//=====================================================================
//函数名称：buttonUp
//函数返回：无
//参数说明：x,y:左上坐标(240*320),x1,y1:右下角坐标(240*320)
//功能概要：在指定位置显示一个凸起的按钮
//=====================================================================
void buttonUp(int x,int y,int x1,int y1);    //凸起的按钮

//=====================================================================
//函数名称：buttonDown
//函数返回：无
//参数说明：x,y:左上坐标(240*320),x1,y1:右下角坐标(240*320)
//功能概要：在指定位置显示一个凹下的按钮
//=====================================================================
void buttonDown(int x,int y,int x1,int y1);    //凹下的按钮



// ------------------  汉字字模的数据结构定义 ------------------------ //
typedef struct typFNT_GB16                 // 汉字字模数据结构
{
       signed char Index[2];               // 汉字内码索引
       char Msk[32];                              // 点阵码数据
} typFNT_GB16;

//=====================================================================
//struct _HEADCOLOR
//scan: 扫描模式
//Bit7: 0:自左至右扫描，1:自右至左扫描。
//Bit6: 0:自顶至底扫描，1:自底至顶扫描。
//Bit5: 0:字节内象素数据从高位到低位排列，1:字节内象素数据从低位到高位排列。
//Bit4: 0:WORD类型高低位字节顺序与PC相同，1:WORD类型高低位字节顺序与PC相反。
//Bit3~2: 保留。
//Bit1~0: [00]水平扫描，[01]垂直扫描，[10]数据水平,字节垂直，[11]数据垂直,字节水平。
//gray: 灰度值
// 1:单色，2:四灰，4:十六灰，8:256色，12:4096色，16:16位彩色，24:24位彩色，32:32位彩色。
//w: 图像的宽度。
//h: 图像的高度。
//is565: 在4096色模式下为0表示使用[16bits(WORD)]格式，此时图像数据中每个WORD表示一个象素；
//为1表示使用[12bits(连续字节流)]格式，此时连续排列的每12Bits代表一个象素。
//在16位彩色模式下为0表示R G B颜色分量所占用的位数都为5Bits，为1表示R G B颜色分量所占用的位数
//分别为5Bits,6Bits,5Bits。
//在18位彩色模式下为0表示"6Bits in Low Byte"，为1表示"6Bits in High Byte"。
//在24位彩色和32位彩色模式下is565无效。
//rgb: 描述R G B颜色分量的排列顺序，rgb中每2Bits表示一种颜色分量，[00]表示空白，[01]表示
//Red，[10]表示Green，[11]表示Blue。
//=====================================================================
typedef struct _HEADCOLOR
{
   unsigned char scan;
   unsigned char gray;
   unsigned short w;
   unsigned short h;
   unsigned char is565;
   unsigned char rgb;
}HEADCOLOR;


void LCD_WR_DATA8(uint_8 da); //发送数据-8位参数
void Address_set(uint_16 x1,uint_16 y1,uint_16 x2,uint_16 y2);

//画笔颜色


#define WHITE       0xFFFF
#define BLACK       0x0000
#define BLUE        0x001F
#define BRED        0XF81F
#define GRED        0XFFE0
#define GBLUE       0X07FF
#define RED         0xF800
#define MAGENTA     0xF81F
#define GREEN       0x07E0
#define CYAN        0x7FFF
#define YELLOW      0xFFE0
#define BROWN       0XBC40  //棕色
#define BRRED       0XFC07  //棕红色
#define GRAY        0X8430  //灰色

//GUI颜色
#define DARKBLUE      0X01CF   //深蓝色
#define LIGHTBLUE     0X7D7C   //浅蓝色
#define GRAYBLUE      0X5458   //灰蓝色
//以上三色为PANEL的颜色

#define LIGHTGREEN    0X841F  //浅绿色
#define LGRAY         0XC618  //浅灰色(PANNEL),窗体背景色

#define LGRAYBLUE     0XA651  //浅灰蓝色(中间层颜色)
#define LBBLUE        0X2B12  //浅棕蓝色(选择条目的反色)

//=====================================================================
// ------------------  ASCII字模的数据表 ------------------------



#endif

